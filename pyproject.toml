[project]
name = "example-python-project"
version = "0.1.0"
description = "Basic project"
authors = ["Pawel Markowski <pm4public@gmail.com>"]
license = "UNLICENSED"
readme = "README.md"
python = "^3.9"
private = true
homepage = "https://mtechnology.pl"
repository = "https://github.com/pawelmarkowski/django-cms-www"
documentation = "https://github.com/pawelmarkowski/django-cms-www"

keywords = ["python", "django", "example"]

classifiers = ["Topic :: Software Development"]

# Requirements
[build-system]
requires = ["setuptools", "wheel", "toml"]

[install_requires]
toml = "*"
Click = "*"
pydantic = "*"
fastapi = "*"
pytest = "*"

[extras_require.dev]
black = "*"
mypy = "*"
isort = "*"
pytest-cov = "*"
"coverage[toml]" = "*"
"uvicorn[standard]" = "*"
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings = "*"
bandit = "*"
readme_renderer = "*"
check-manifest = "*"
pylint = "*"

# Black
[tool.black]
line-length = 79
target_version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

# MyPy
[tool.mypy]
plugins = ["pydantic.mypy"]
platform = "linux"

show_column_numbers = true

follow_imports = "normal" # show error messages from unrelated files

ignore_missing_imports = true # suppress errors about unsatisfied imports

disallow_untyped_calls = true
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = false # be strict
# Until we're not supporting 3.6 primer needs this

disallow_untyped_defs = true
check_untyped_defs = true    # The following are off by default.  Flip them on if you feel
# adventurous.

cache_dir = "/dev/null" # No incremental mode

# Isort
[tool.isort]
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
multi_line_output = 3
force_grid_wrap = 0
line_length = 79

# Pytest Coverage pytest-cov
[tool.coverage.run]
omit = ["*/migrations/*", "*/tests/*", "*/test*.py", "*/.venv/*", "*/.tox/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]
fail_under = 20

[tool.pylint.'MESSAGES CONTROL']
# C0111 Missing docstring
# I0011: Locally disabling %s
# I0012: Locally enabling %s
# W0704 Except doesn't do anything Used when an except clause does nothing but "pass" and there is no "else" clause
# W0142 Used * or * magic* Used when a function or method is called using *args or **kwargs to dispatch arguments.
# W0212 Access to a protected member %s of a client class
# W0232 Class has no __init__ method Used when a class has no __init__ method, neither its parent classes.
# W0613 Unused argument %r Used when a function or method argument is not used.
# W0702 No exception's type specified Used when an except clause doesn't specify exceptions type to catch.
# R0201 Method could be a function
# W0614 Unused import XYZ from wildcard import
# R0903 Too few public methods
# R0904 Too many public methods
# R0914 Too many local variables
# R0912 Too many branches
# R0915 Too many statements
# R0913 Too many arguments
# R0923: Interface not implemented
disable = [
  "I0011",
  "I0012",
  "C0111",
  "W0142",
  "R",
  "missing-docstring",
  "no-member",
]

[tool.pylint.REPORTS]
reports = "yes"
score = "yes"
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "colorized"

[tool.pylint.SIMILARITIES]
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 4

[MISCELLANEOUS]
notes = ["FIXME", "TODO"]

[FORMAT]
single-line-if-stmt = "no"
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
max-line-length = 79
max-module-lines = 2000
indent-string = '    '

[DESIGN]
ignored-argument-names = "_.*"
max-args = 5
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-parents = 7
max-attributes = 7
min-public-methods = 2
max-public-methods = 20

[CLASSES]
defining-attr-methods = ["__init__", "__new__"]
valid-classmethod-first-arg = "cls"

[EXCEPTIONS]

#only legacy form is supported, so we will use additional tox.ini config file
#[tool.tox]
#legacy_tox_ini = """
#
#"""
