[tox]
envlist = py{39}-stable, py39-stable-cover,coverage,
    lint, security

# combinations on all environments
[testenv]
deps = 
    stable: -e .

commands =
    python --version
    pytest --rootdir={toxinidir} {posargs:}
extras =
    testing
setenv =
    COVERAGE_FILE=.coverage.{envname}
    PYTHONPATH = {envdir}{:}{toxinidir}/{:}{toxinidir}/{env:PYPROJECT_NAME_UNDERSCORE}/
passenv = 
    PYPROJECT_*

[testenv:py39-stable-cover]
commands =
    python --version
    pytest --rootdir={toxinidir} --cov {posargs:}
deps =
    pytest
    pytest-cov

[testenv:lint]
skip_install = true
commands =
    pylint --rcfile pyproject.toml {env:PYPROJECT_NAME_UNDERSCORE}/ tests/ setup.py
    isort  --settings-path pyproject.toml --check-only --df  {env:PYPROJECT_NAME_UNDERSCORE}/ tests/ setup.py
    black --config pyproject.toml --check --diff {env:PYPROJECT_NAME_UNDERSCORE}/ tests/ setup.py
deps =
    pylint
    isort
    black
passenv = 
    PYPROJECT_*

[testenv:security]
skip_install = true
commands =
    bandit -r {env:PYPROJECT_NAME_UNDERSCORE}/ setup.py
deps =
    bandit
passenv = 
    PYPROJECT_*

[testenv:docs]
description = Run a development server for working on documentation
deps = 
    mkdocs
    mkdocs-material
    mkdocstrings

commands = 
    mkdocs build --clean
    python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
    mkdocs serve -a localhost:8080

; [testenv:docs-deploy]
; description = built fresh docs and deploy them
; deps = {[testenv:docs]deps}
; basepython = {[testenv:docs]basepython}
; commands = mkdocs gh-deploy --clean


[testenv:coverage]
skip_install = true
commands =
    coverage combine
    coverage xml
    coverage report
deps =
    coverage[toml]
setenv =
    COVERAGE_FILE=.coverage
depends = py39-stable-cover

[testenv:format]
skip_install = true
commands =
    isort --settings-path pyproject.toml  {env:PYPROJECT_NAME_UNDERSCORE}/ tests/ setup.py
    black --config pyproject.toml {env:PYPROJECT_NAME_UNDERSCORE}/ tests/ setup.py
deps =
    black
    isort
passenv = 
    PYPROJECT_*

[testenv:build]
skip_install = true
commands =
    # clean up build/ and dist/ folders
    python -c 'import shutil; shutil.rmtree("dist", ignore_errors=True)'
    python setup.py clean --all
    # create manifest
    check-manifest -c
    # build sdist
    python setup.py sdist --dist-dir {toxinidir}/dist
    # build wheel from sdist
    pip wheel -v --no-deps --no-index --no-build-isolation --wheel-dir {toxinidir}/dist --find-links {toxinidir}/dist {env:PYPROJECT_NAME_UNDERSCORE}
    #check build
    twine check {toxinidir}/dist/*
    check-manifest
deps =
    setuptools
    wheel
    toml
    twine
    check-manifest
passenv = 
    PYPROJECT_*
